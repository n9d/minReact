* minReact

- 最小の構成で react(redux/saga) を実験する

* 実験環境
** github-pages

- [[https://n9d.github.io/minReact/][ここ]]で確認できる

** local

- git clone した後、当該フォルダで何らかの形でローカルHTTPサーバを立ち上げる
	- =brew install  http-server= でインストールした http-serverを実行するか
	- =npm install -g httpserver= でインストールした httpserverを実行するか
	- =python -m http.server 3000= で実行
  - =docker-compose up -d= でnginxが80で立ち上がる
	- =npx serve= で良さそうな気もする(jsやってるんだからコレだろうな) -> [[http://localhost:5000/index.html][ここ]]をアクセス

* Babel

 [[file:babel.html][babelでhelloworld]]

- jsxがbabelを必要とするため必要

* React
** jsxなし

[[file:non-jsx.html][jsxなしreact]]

- コンソールで =React= を評価すると reactが持っているメソッド一覧が確認できる (createElementや useState等がある)
- コンソールで =ReactDOM= を評価すると reactが持っているメソッド一覧が確認できる(renderはここにある)
- このソースコードをみると JSXとは =React.createElement= に他ならないことがわかる

** 仮想DOMを認識

[[file:purecomponent.html][PureComponent]]

- コンソールで確認すると、レンダリングの回数が理解できる
- このソースのTag1〜3の継承元をPC(PureComponent),RC(Component)に切り替えることでレンダリングの有無が変わる
- 例えばTag2のみをPureComponentにした場合 Tag2の再レンダリングがなかったらTag3は書き換えられれないことに注意
- 故にReactの再レンダリングの最適化は最後にしろということになる。

* Redux

[[file:redux.html][Redux]]

- コンソールで開いた後リロードして確認すると、storeの変遷が見れる
- コンソールで =Redux= を評価すると reduxが持っているメソッド一覧が確認できる（以下５つ）

- combineReducers :: reducer合成用
- createStore :: store作成用
- applyMiddleware ::  sagaを使うときに使う

* Redux-Saga
** Sagaの最小構成
[[file:saga.html][Redux-Saga]]

- コンソールで開いた後リロードして確認すると、storeの変遷が見れる
- コンソールで =ReduxSaga= を評価すると redux-sagaが持っているメソッド一覧が確認できる

- Redux-Sagaでは、StoreにActionを適用した後、Storeの変更を感知するためにActionを契機としていることに注意すること
- つまり人間（ユーザ）側では、ボタンに該当するコンポーネントによってStoreの変更を感知するが、Saga側ではコピーされたアクションがコレに当たる
- したがって、「StoreはどのようなActionでも遷移する」（変化しない場合も恒等で遷移する）ことに注意
- reducerの =switch= における =default= 部分がコレに当たる

- 1saga=1userと覚える

- runSaga :: これぐらいしか使わない
- default :: nodeで使うときには createSagaMiddleware となる
- effects :: put,call,take等の関数が入っている

- generatorで記述することで、疑似マルチスレッドとし、各スレッド(saga)を逐次処理で記述することができる
- 様々なsagaのeffectを利用し store及び外界と通信を行う
	- fork :: un*x のfork同様、プロセスを分岐させる
	- take :: storeの観察契機として storeの次に渡された特定Actionをwatchする
	- select :: storeを取得する。本来的にはselectの結果でsagaは動くべきだがコストが高いのでtakeがあるものと推測
	- call :: promiseを実行し結果をpromiseから剥いてくれる(BlockingI/O的に書くのに必須)
	- put :: storeにActionを投げて次の状態遷移を行わせる（put以外に内部システムとの通信手段を持たないようにすること）
	- cancel :: process kill に該当

- とはいえ、 =fork(while(true){take("action");saga()}= 用にいくつか用意されている
	- takeEvery :: 並列実行
	- takeLatest :: 後勝ち実行
	- takeLeading :: 先勝ち実行
	- throttole :: 実行し始めたらミリ秒間遅延させる（チャタリング防止）
- =takeLatest(["AA","BB"],mySaga)= だと "AA" 処理中に "BB" が来たときに "AA" を中断する

- また同時実行のためのものもある
	- race :: 一番早いやつを採用
	- all :: 複数を並列実行し全部終了するまで待つ

- rootSagaの記述方法によって起動される順序、個数、回数が異なることに注意

** Sagaでhttpアクセス

[[file:fetch.html][sagaでfetch]]

- localにある =json/sample.json= を取得する
- データを得た後、更に actionを発行し storeに格納していることに注意

* React-Redux
** 最小構成

[[file:react-redux-render-with-babel.html][React-Redux]]

- コンソールで開いた後リロードして確認すると、レンダリングのタイミング及びstoreの変遷が見れる
- コンソールで =ReactRedux= を評価すると react-reduxが持っているメソッド一覧が確認できる

- Provider :: React.Componentのトップにコレをかぶせる
- connect :: 引数にReact.Componentを取り、第１引数にstoreの写像を行う関数,第２引数にディスパッチャの写像を行う関数を指定することにより、propsにそれらをマッピングした新しい React.Componentを出力する

** propsオーバーライド

[[file:props-override.html][props-override]]

- ReactRedux.connectの機能によりマッピングされた値はコンポーネントが本来保持する同名のpropsを上書きする
- このことはそのコンポーネントが単独で動作することを確認した後、reduxへ組み込むことができることを意味し、コンポーネントのモジュール性を向上させる
- Tag3AloneはTag3Baseのテストとして機能する
- Tag3Aloneの =inc = () => { this.setState(prev => { return { c: prev.c + 1 } }) }= という記述は超大事、この書き方をすると Tag3Baseは Reduxと容易に切替可能になる。
- 一般的なビルドツリーでは =exports default ReactRedux.connect(....)(Tag3Base)= とやり、 Tag3Base自身を隠蔽してしまうのでここは考察しなければならい
- Tag3Base コンポーネントは Formの元となるコンポーネントといえ、今後の基本記述スタイルになると考えられる。

** propsオーバーライド（関数コンポーネント版）

[[file:props-override-with-function-component.html][props-override-with-function-component]]

- Tag3Aloneの =const [count, setCount] = React.useState(10)=  =const inc = () => { setCount(count + 1) }= という記述は超大事、この書き方をすると Tag3Baseは Reduxと容易に切替可能になる。


** 複数ドメインのstore

[[file:dual-domain-store.html][dual-domain-store]]

- 複数ドメインのstoreを領域を区切ってそれぞれコンポーネントにマッピングしても関係のある範囲でしか再描画しない。(react面目躍如)

* React/Redux/Saga

[[file:react-redux-saga.html][全部入り]]

- 全部の要素が入って200行
- inlineのbabelでgenerator動かすのすごく苦労した =npm install babel-standalone babel-polyfill=

#+BEGIN_SRC js :exports both
  <script src="lib/babel.js"></script>
  <script src="lib/polyfill.js"></script>
  <script type="text/babel" data-presets="es2017,react">

  </script>
#+END_SRC
* まとめ

- React/Redux/SagaはMVCである
- Reactは View を担当し、Controllerとしては ReduxのActionを発行するのみ
- Reduxは Model を担当し、Action以外の変更を受け付けない。
- Sagaは疑似マルチスレッドにより全ての非同期処理を担当する。Storeに対するアクターモデルであるとも言える


[[file:img/React-Redux-Saga.png][動作イメージ]]

* index.html 作成スクリプト

#+BEGIN_SRC sh :exports both
cat << HEAD > index.html
<html>
  <head>
    <title>最小構成でReactJS</title>
  </head>
  <body>
    <p> 詳細は<a href="https://github.com/n9d/minReact">minReact</a>を参照のこと </p>
    <p />
HEAD

for file in *.html; do
  if [ $file != index.html ]; then
    title=`cat $file | ruby -e 'print STDIN.read.match(/<title>([^<]*)<\/title>/m)[1]'`
    echo "    <p> <a href='${file}'>${title}</a> ${file} </p>" >> index.html
  fi
done

cat << TAIL >> index.html
  </body>
</html>
TAIL

#+END_SRC

#+RESULTS:

* 開発環境整備
** Visual Studio Code
*** 拡張

- 下記を実行

#+BEGIN_SRC sh :exports both
code --install-extensions aeschli.vscode-css-formatter
code --install-extensions dbaeumer.vscode-eslint
code --install-extensions joelday.docthis
code --install-extensions MS-CEINTL.vscode-language-pack-ja
code --install-extensions msjsdiag.debugger-for-chrome
code --install-extensions oderwat.indent-rainbow
code --install-extensions SimonSiefke.svg-preview
#code --install-extensions sohamkamani.code-eol
#+END_SRC

*** Setting.json

#+BEGIN_SRC js :exports both
    "[typescript]": {
        "editor.tabSize": 4
    },
    "[html]": {
        "editor.tabSize": 2
    },
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.detectIndentation": false,
    "editor.formatOnPaste": true,
    "editor.formatOnSave": true,
    "editor.renderControlCharacters": true,
    "editor.renderWhitespace": "all",
    "editor.tabSize": 4,
    "eslint.enable": true,
    "eslint.validate": [
        {
            "language": "typescript",
            "autoFix": true
        },
        {
            "language": "typescriptreact",
            "autoFix": true
        }
    ],
    "extensions.ignoreRecommendations": true,
    "files.exclude": {
        "**/.git": false,
        "**/.vscode": false,
        "**/.svn": false,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true
    },
    "git.suggestSmartCommit": false,
    "javascript.preferences.quoteStyle": "double",
    "terminal.integrated.shell.windows": "C:\\WINDOWS\\System32\\cmd.exe",
    "typescript.preferences.quoteStyle": "double",
    "typescript.updateImportsOnFileMove.enabled": "always",
    "window.zoomLevel": 0,
    "workbench.editor.enablePreview": false
}
#+END_SRC

** ライブラリ抽出

- umd系の物を持ってくればいい
- 下記一連の作業で最小の必要なものが =./lib= 以下に置かれる
- そのへんのCDNに転がっているやつは古いことが多いので・・・

#+BEGIN_SRC sh :exports both
mkdir lib
npm init -y
npm install babel-standalone
npm install babel-polyfill
npm install react react-dom
npm install redux
npm install redux-saga
npm install reactx-redux
cp node_modules/babel-standalone/babel.js lib
cp node_modules/babel-polyfill/dist/polyfill.js lib
cp node_modules/react/umd/react.development.js lib
cp node_modules/react-dom/umd/react-dom.development.js lib
cp node_modules/redux/dist/redux.js lib
cp node_modules/redux-saga/dist/redux-saga.umd.js lib
cp node_modules/react-redux/dist/react-redux.js lib
#+END_SRC
